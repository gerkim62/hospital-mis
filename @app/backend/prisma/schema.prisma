// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id        String   @id @default(uuid())
  name      String
  birthDate DateTime

  

  visits PatientVisit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientVisit {
  id String @id @default(uuid())

  labs Lab[]

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String

  arrivalTime DateTime
  leaveTime   DateTime?

  symptoms  String
  diagnosis String
  treatment String
  notes     String

  // array of the stockItems the patient has been given
  stockItemsConsumed StockItem[]

  bill Float
}

model Lab {
  id          String @id @default(uuid())
  name        String
  description String

  status LabStatus @default(PENDING)

  PatientVisit   PatientVisit @relation(fields: [patientVisitId], references: [id])
  patientVisitId String
}

model LabResult {
  id      String @id @default(uuid())
  result  String
  comment String
}

model StockItem {
  id          String @id @default(uuid())
  name        String
  description String
  quantity    Int
  unit        String //e.g Kg, Litres, etc

  movements      StockMovement[]
  PatientVisit   PatientVisit?   @relation(fields: [patientVisitId], references: [id])
  patientVisitId String?
}

model StockMovement {
  id          String            @id @default(uuid())
  quantity    Int
  createdAt   DateTime
  description String?
  type        StockMovementType
  priceKes    Float

  item   StockItem @relation(fields: [itemId], references: [id])
  itemId String
}

enum StockMovementType {
  IN
  OUT
}

enum LabStatus {
  PENDING
  IN_PROGRESS
  DONE
}
